smallInput = `....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...`;

bigInput = `..#.....................#............#....#...........#...............................#.....#.....................................
.................#............................#.............##..#...............................#....#..#.........#...............
.............................................##.........................................#....................#...............#...#
...##....................#...............#.....#....................#......##..............#............................#....#....
.................................#..#..............#...........#.............#..#........................#............#...........
.................#.........................#...........................#........................#........................#........
...#....................................#....#.........#................#...............#.....#................#.....#............
.............#.#..........................................................#...#..................#....#.......#.....#...#.........
.....#........................#....##...#............................................................#............................
..................#...#.........................................#..................#.............................#.#........#.....
......#...............................#.#..........##..#...........#.........................#.......#....................#.......
.................................#..............#...............#........#..........#.........#............#.........#.......#...#
..#..#............#...#.....................#...............#............#.#........................#........#...............#....
..............#..#.#........................#.........#...........##.......#..........#.....................#..............#...#..
..........................#.................##...................................#....#.........#.................................
..................#..#........#....#...............#..............#.......#.......#......................................#..#...#.
..........#.#.................#.........#...................#.......................##......#....................#.......#........
..........#.........#...#......................................................................#.....#............#........#......
...##.............#...........................................................#..#....................##.#...#.#..#.........#..#..
.....#......#.............................#.......#...#...#...............#.....#............#........#..#.#......................
........#................#.........#.......................................................................#..........#...........
.......#........................................#..........#...............................#..#...................................
..................##.......#.......#.....#............#.......#...#.........#....##...............#..#.............#..........#...
.......#...........#...........#...........................#.............#.........#..#........................#.##...............
.....................................................................#........#....#...........................................#..
....#...........#......#.........#....................................#.................................#......#..................
...#........................................#..#...............................#.....................#.#......#...................
..#.....#.................................#.................#....#............................................#......#............
...................................................##...........#.......#.............#.................#.......#.................
..........................................................##..............#....#....#.............#...............................
........................................................#.....................................#................................#..
..............##....#..#..........#...........#......#..#....#.......#................#............................#..#...#.......
..........................#....................#.................................................#................................
#................................................#.....................#..#...............##........#...#...#.........#...........
...........#.................................#..#....................#.#.......#..........................#.......#.......#.......
..............................#......#......#.................#.................#.................#.#.............#..#.#..........
.......................#....................#....................................#.....#.#.......#............................#...
...............................................................................................#.#................................
#..................#.....#...............................#..............#...#.....................................................
..........................................................#.................................................#.....................
..........#.........................#.....................................................#.........#..........#................#.
........#..............#..#......................................#.........#............#.................................#.......
.......#.........................................................#.........#................#...............................#.....
...........#............................................#...#.............................#.....^................................#
................#.............#...#..............................#..................................#.............................
.........................................................................................................#........................
.................................................#........#.......................#.#.....#......................#................
.........#.........#...#....................................................#.....................................................
##.##..#...................................#......................................................................................
.................#...........................................................................................#........#...........
.........................................................................#........................#....#......................#...
..............#......................#........#..........................#.........#..............................................
.......................#............................................................................##............................
.....#.................#........#...#...............#.............................#......................#........................
....#...................................................................................#............##...........................
................#............................#............................................#.......................................
.......................................................................................................#......#...................
......................................................................................#...#.......................................
...............................................#........#..........#............................#..............#.......#..........
..............#.....................#........#..#............................#...#..#.#...................................#.......
..........#...............................#............................#...........................................#..............
....#............#.#....#......................................................................#..................................
.......................#.......................#................................#..............#.....................#.........#..
...........#.........................#.............#.#........#........#..........................................#...............
.......#......................#....................#...............................#......................#...........#...........
............#.....................................................................................................................
....#.......#............................................................#.........#.............#..........#....#..........#.....
.......#.........................................................................#..................#..#....#.......#.............
............................#....#.......#......#.......#.....................#.................#.................................
.......................................................#.............#..........................#.................................
....................................#.....................................##......................#............................#..
..............#...............#....................#.......................#................#......................#..............
....................#...........................#...................................................................#.............
...#..........................#...........................#............................................................#..........
..............#.................#.............................#..#.......#.......................#.##.............................
....................#.....#...#..............................................#......#...........#.................#..#....#.......
#......................................#.....................#..#..#.#...........#.............#.................................#
.....................#...........................................................#..........#............##..........#............
.......#..................................#...............#..........#....#...................................................#...
.............#.................#...........................#..............#.................................................#.....
...............................#......................................##...................................#.#......#..........#..
.................##....................#.................................................#......................#................#
........#....................................#..........#.........................#..................#......................#.....
...#....#...........................#..............................#.#..........................#.................................
.#...................................#..#......#.................................................................#................
.................................#...........#................#.#........................#....................................##..
#..#.....##...............#................................................................#....#......#.........................#
.#....#......................................................#.........................#.......................................#..
.#..............................................#.................................................................#...............
...............#..........................................#...#...............................#.#..#.#........#...................
..............#................................#.......#..................................#.........................#........#....
.......................##..................................................#......................................................
..............................#...............................##..................................................................
#....................#...........................................................#.............................#..................
#..................................................................#...#..........................................................
#..#........#...................................#..#..........##..............#...................................................
.......................#.....................#....................................................................................
.....................#...........#.............................................................#........................#....#....
...............#............................................................................##...#..........................#.....
...#......................................#.......................................................................................
....#...........................#.........#.................................................#..........#...#........#....#........
......#....#.#............................#..........................................#........................................#...
...........#...#.............................................#......................#..................#.....................#....
...#..........#........#..........#.......#..............#.............................#.......................#................#.
...........#...............#...........................................................#..........................................
..#..........##.................................................#...#...............#.......................#...............##....
.......................#..............#.............#......................................................#..................#...
..............#..#........##..........#...................................................#.............##....................#...
...................#..................................................#................#......#.....#.........#.#...#.............
..................#.................................................#.................................................#.........#.
......................................#.#........#.....#...#..........#..............#.........................#...#..............
.................................#..............#..#.....................#................#.............#..#..#...................
.........#.......#.#..............#..#...............#.................#..................................#..#....................
.............................#....#.......##..................................................................................##..
.....................................................................................#........#.......#......#....................
........#...........#..........#..........#............................#...............#........#.#...........................#...
.#.................#...#..............#...#...................#........#...............#..........................................
.........#............................................##........#......#.....................#.......................#............
.......................................#..........#..#......#........#..........#..........................#....................#.
....#......#..........................#....................#.......................................#.....###.......#..............
.......#..................#....#.......................................................................#..........................
....#........................#.............................................................#.......#..........................#...
......................#.................................#..........#................#..#.........................#................
...........#....................................................#..............#...........................#......................
.....#................#........#...#....#........#............#...............#.......................#..#.........#..............
#..................................................#...........................#....#...........#.................................
....#.#.....................................#.#...............#................#....................................#.............
............#....................#.#.#...............................................#...................##.......................
...##..............#........................#.............#.......#...........#.#.##..............................#....##.........
......#...........#....................................................#.........................##...............................`

const parseToArrays = (inp) => inp.split(`\n`).map((x) => x.split(``));
padArray = inp => {
    parsed = parseToArrays(inp)
    padded = parsed.map(x => [0, ...x, 0])
    zerorow = Array(parsed[0].length + 2)
    zerorow.fill(0);
    return [zerorow, ...padded, zerorow];
}
const unparse = inp => inp.map(x => x.join(``)).join(`\n`);


dirUp = '^';
dirDown = 'v';
dirLeft = '<';
dirRight = '>';
obst = "#";
exit = 0;
stepped = 'X';

const parsedSmall = padArray(smallInput)

step = inp => {

    const newMap = inp.map(x => [...x])
    let exited = false;

    inp.forEach((y, yi) => {
        y.forEach((cell, xi) => {

            switch (cell) {
                case dirUp:
                    const up = inp[yi - 1][xi];
                    if (up === obst) {
                        newMap[yi][xi] = dirRight;
                    } else if (up === exit) {
                        newMap[yi][xi] = stepped;
                        newMap[yi - 1][xi] = cell;
                        exited = true;
                    } else {
                        newMap[yi][xi] = stepped;
                        newMap[yi - 1][xi] = cell;
                    }
                    break;
                case dirDown:
                    const down = inp[yi + 1][xi];
                    if (down === obst) {
                        newMap[yi][xi] = dirLeft;
                    } else if (down === exit) {
                        newMap[yi][xi] = stepped;
                        newMap[yi + 1][xi] = cell;
                        exited = true;
                    } else {
                        newMap[yi][xi] = stepped;
                        newMap[yi + 1][xi] = cell;
                    }
                    break;
                case dirLeft:
                    const left = inp[yi][xi - 1];
                    if (left === obst) {
                        newMap[yi][xi] = dirUp;
                    } else if (left === exit) {
                        newMap[yi][xi] = stepped;
                        newMap[yi][xi - 1] = cell;
                        exited = true;
                    } else {
                        newMap[yi][xi] = stepped;
                        newMap[yi][xi - 1] = cell;
                    }
                    break;
                case dirRight:
                    const right = inp[yi][xi + 1];
                    if (right === obst) {
                        newMap[yi][xi] = dirDown;
                    } else if (right === exit) {
                        newMap[yi][xi] = stepped;
                        newMap[yi][xi + 1] = cell;
                        exited = true;
                    } else {
                        newMap[yi][xi] = stepped;
                        newMap[yi][xi + 1] = cell;
                    }
                    break;
                default:
                    break;

            }
        })
    })

    if (exited) {
        return newMap;
    } else {
        // console.log(unparse(newMap));
        return step(newMap)
    }

}

final = inp => {
    parsed = padArray(inp);
    steps = step(parsed);
    console.log(unparse(steps));
    return steps.flat().filter(x => x == stepped).length;
}




stepWithLoopCheck = (inp, xi, yi) => {

    newMap = [...inp]

    cell = inp[yi][xi];


    if (cell.stepHistory.has(cell.current)) {
        // console.log(unparseLoopyMap(newMap), "loop");
        console.log("loop");
        return [newMap, 1];
    }

    switch (cell.current) {
        case dirUp:
            newMap[yi][xi].stepHistory.add(cell.current);
            const up = inp[yi - 1][xi];
            if (up.current === obst) {
                newMap[yi][xi].current = dirRight;
                return stepWithLoopCheck(newMap, xi, yi)
            } else if (up.current === exit) {
                newMap[yi][xi].current = stepped
                return [newMap, 0];
            } else {
                newMap[yi - 1][xi].current = cell.current;
                newMap[yi][xi].current = stepped
                return stepWithLoopCheck(newMap, xi, yi - 1)
            }
            break;
        case dirDown:
            newMap[yi][xi].stepHistory.add(cell.current);
            const down = inp[yi + 1][xi];
            if (down.current === obst) {
                newMap[yi][xi].current = dirLeft;
                return stepWithLoopCheck(newMap, xi, yi)
            } else if (down.current === exit) {
                newMap[yi][xi].current = stepped
                return [newMap, 0];
            } else {
                newMap[yi + 1][xi].current = cell.current;
                newMap[yi][xi].current = stepped
                return stepWithLoopCheck(newMap, xi, yi + 1)
            }
            break;
        case dirLeft:
            newMap[yi][xi].stepHistory.add(cell.current);
            const left = inp[yi][xi - 1];
            if (left.current === obst) {
                newMap[yi][xi].current = dirUp;
                return stepWithLoopCheck(newMap, xi, yi)
            } else if (left.current === exit) {
                newMap[yi][xi].current = stepped
                return [newMap, 0];
            } else {
                newMap[yi][xi - 1].current = cell.current;
                newMap[yi][xi].current = stepped
                return stepWithLoopCheck(newMap, xi - 1, yi)
            }
            break;
        case dirRight:
            newMap[yi][xi].stepHistory.add(cell.current);
            const right = inp[yi][xi + 1];
            if (right.current === obst) {
                newMap[yi][xi].current = dirDown;
                return stepWithLoopCheck(newMap, xi, yi)
            } else if (right.current === exit) {
                newMap[yi][xi].current = stepped
                return [newMap, 0];
            } else {
                newMap[yi][xi + 1].current = cell.current;
                newMap[yi][xi].current = stepped
                return stepWithLoopCheck(newMap, xi + 1, yi)
            }
            break;
        default:
            break;

    }


}





// memoize=fn=> {
//     memo = new Map();

//     return function(n) {

//         if (memo.has(n)) {
//             return memo.get(n);
//         } 
//         result = fn(n);
//         memo.set(n, result);
//         return result;
//     }
// }

// stepWithLoopCheck = memoize(stepWithLoopCheck);

const unparseLoopyMap = inp => inp.map(x => x.map(y => y.current).join(``)).join(`\n`);


getInitialPosition=inp=>{
    position = [0,0]
    inp.forEach((y, yi) => {
        y.forEach((cell, xi) => {
            if ([dirUp, dirDown, dirLeft, dirRight].includes(cell)) {
                position = [xi, yi];
            }
        })
    })
    return position;

}

loopDetector = inp => {
    loopyMap = inp.map(x => x.map(cell => ({ current: cell, stepHistory: new Set() })))
    ip = getInitialPosition(inp)
    steps = stepWithLoopCheck(loopyMap, ip[0], ip[1]);
    // console.log(unparseLoopyMap(steps[0]), steps[1]);
    return steps[1];
}

getAllObstructionPlacements = inp => {
    parsed = padArray(inp);
    steps = step(parsed);
    positions = []

    steps.forEach((y, yi) => {
        y.forEach((cell, xi) => {
            if (cell === stepped && ![dirUp, dirDown, dirLeft, dirRight].includes(parsed[yi][xi])) {
                console.log(cell)
                positions.push([xi, yi]);
            }
        })
    })
    // console.log('ppp', positions);
    return positions;
}


final2 = inp => {
    original = padArray(inp);
    allObstructionPlacements = getAllObstructionPlacements(inp);
    allObstructions = allObstructionPlacements.map(p => {
        obstructed = original.map(x => [...x]);
        obstructed[p[1]][p[0]] = obst;
        // console.log(unparse(obstructed))
        return obstructed
    });




    // console.log(unparse(allObstructions[0]));
    // return loopDetector(allObstructions[0]);
    loops = 0
    allObstructions.forEach((o, oi) => {
        // try {
        //     console.log(oi);
        //     loopDetector(o);
        // } catch (err) {
        //     // console.log(err, oi);
        //     loops += 1;
        // }
        console.log(oi)
        loops += loopDetector(o);
    });

    return loops


}

// 3637 too high

final2(bigInput)